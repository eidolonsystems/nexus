cmake_minimum_required(VERSION 3.8)
project(spire)

include_directories(./../../include)
include_directories($ENV{BEAM_INCLUDE_PATH})
include_directories($ENV{BOOST_INCLUDE_PATH})
include_directories($ENV{CRYPTOPP_INCLUDE_PATH})
include_directories($ENV{NEXUS_INCLUDE_PATH})
include_directories($ENV{OPEN_SSL_INCLUDE_PATH})
include_directories($ENV{QT_INCLUDE_PATH})
include_directories($ENV{QT_CORE_INCLUDE_PATH})
include_directories($ENV{QT_GUI_INCLUDE_PATH})
include_directories($ENV{QT_SVG_INCLUDE_PATH})
include_directories($ENV{QT_WIDGETS_INCLUDE_PATH})
include_directories($ENV{SPIRE_INCLUDE_PATH})
include_directories($ENV{YAML_INCLUDE_PATH})
include_directories($ENV{ZLIB_INCLUDE_PATH})

set(CMAKE_BUILD_TYPE $ENV{PROJECT_BUILD_TYPE})
set(CMAKE_LIBRARY_FLAGS "")

link_directories($ENV{BOOST_DEBUG_PATH})
link_directories($ENV{BOOST_OPTIMIZED_PATH})

if(MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX /bigobj /std:c++17 /Wv:18")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")
  set(CMAKE_LIBRARY_FLAGS "/LTCG")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
  set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
  add_definitions(-DBOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE)
  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
  add_definitions(-D_HAS_AUTO_PTR_ETC=1)
  add_definitions(-DNOMINMAX)
  add_definitions(-DQT_NO_KEYWORDS)
  add_definitions(-D_SCL_SECURE_NO_WARNINGS)
  add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
  add_definitions(-D_WIN32_WINNT=0x0501)
  add_definitions(-DWIN32_LEAN_AND_MEAN)
  add_definitions("/wd4005")
  add_definitions("/wd4091")
  add_definitions("/wd4275")
  add_definitions("/wd4297")
  add_definitions("/wd4355")
  add_definitions("/wd4503")
endif()
if(UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
endif()
if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR
    ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -std=c++17")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -O2 -DNDEBUG")
endif()
if(${CMAKE_SYSTEM_NAME} STREQUAL "SunOS")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -pthreads")
endif()
if(NOT EXISTS $ENV{LIB_INSTALL_DIRECTORY}/debug)
  file(MAKE_DIRECTORY $ENV{LIB_INSTALL_DIRECTORY}/debug)
endif()
if(NOT EXISTS $ENV{LIB_INSTALL_DIRECTORY}/release)
  file(MAKE_DIRECTORY $ENV{LIB_INSTALL_DIRECTORY}/release)
endif()
if(NOT EXISTS $ENV{TEST_INSTALL_DIRECTORY}/debug)
  file(MAKE_DIRECTORY $ENV{TEST_INSTALL_DIRECTORY}/debug)
endif()
if(NOT EXISTS $ENV{TEST_INSTALL_DIRECTORY}/release)
  file(MAKE_DIRECTORY $ENV{TEST_INSTALL_DIRECTORY}/release)
endif()

add_subdirectory(book_view_ui_tester)
add_subdirectory(charting_ui_tester)
add_subdirectory(library)
add_subdirectory(login_ui_tester)
add_subdirectory(resources)
add_subdirectory(scratch)
add_subdirectory(security_input_ui_tester)
add_subdirectory(spire)
add_subdirectory(time_and_sales_ui_tester)
add_subdirectory(toolbar_ui_tester)

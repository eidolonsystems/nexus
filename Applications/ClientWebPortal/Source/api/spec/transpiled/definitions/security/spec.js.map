{"version":3,"sources":["../../../src/definitions/security/spec.js"],"names":["describe","beforeAll","securityData","country","market","symbol","it","security","fromData","expect","toBe","constructor","name","wildCardSecurity","getWildCard","toCode","isWildCard"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,UAAT,EAAqB,YAAW;AAC9BC,YAAU,YAAW;AACnB,SAAKC,YAAL,GAAoB;AAClBC,eAAS,GADS;AAElBC,cAAQ,MAFU;AAGlBC,cAAQ;AAHU,KAApB;AAKD,GAND;;AAQAC,KAAG,wCAAH,EAA6C,YAAW;AACtD,QAAIC,WAAW,mBAASC,QAAT,CAAkB,KAAKN,YAAvB,CAAf;AACAO,WAAO,UAAP,EAAmBC,IAAnB,CAAwBH,SAASI,WAAT,CAAqBC,IAA7C;AACAH,WAAO,aAAP,EAAsBC,IAAtB,CAA2BH,SAASJ,OAAT,CAAiBQ,WAAjB,CAA6BC,IAAxD;AACAH,WAAO,YAAP,EAAqBC,IAArB,CAA0BH,SAASH,MAAT,CAAgBO,WAAhB,CAA4BC,IAAtD;AACAH,WAAO,KAAP,EAAcC,IAAd,CAAmBH,SAASF,MAA5B;AACD,GAND;;AAQAC,KAAG,yBAAH,EAA8B,YAAW;AACvC,QAAIO,mBAAmB,mBAASC,WAAT,EAAvB;AACAL,WAAO,GAAP,EAAYC,IAAZ,CAAiBG,iBAAiBT,MAAjB,CAAwBW,MAAxB,EAAjB;AACAN,WAAO,GAAP,EAAYC,IAAZ,CAAiBG,iBAAiBR,MAAlC;AACD,GAJD;;AAMAC,KAAG,qBAAH,EAA0B,YAAW;AACnCG,WAAO,IAAP,EAAaC,IAAb,CAAkB,mBAASM,UAAT,CAAoB,GAApB,CAAlB;AACAP,WAAO,IAAP,EAAaC,IAAb,CAAkB,mBAASM,UAAT,CAAoB,KAApB,CAAlB;AACAP,WAAO,IAAP,EAAaC,IAAb,CAAkB,mBAASM,UAAT,CAAoB,OAApB,CAAlB;AACAP,WAAO,KAAP,EAAcC,IAAd,CAAmB,mBAASM,UAAT,CAAoB,IAApB,CAAnB;AACAP,WAAO,KAAP,EAAcC,IAAd,CAAmB,mBAASM,UAAT,CAAoB,KAApB,CAAnB;AACD,GAND;AAOD,CA9BD","file":"spec.js","sourcesContent":["import Security from '../../../../dist/definitions/security';\n\ndescribe(\"Security\", function() {\n  beforeAll(function() {\n    this.securityData = {\n      country: 124,\n      market: 'XTSE',\n      symbol: 'XIU'\n    };\n  });\n\n  it(\"Convert to Security from plain object.\", function() {\n    let security = Security.fromData(this.securityData);\n    expect('Security').toBe(security.constructor.name);\n    expect('CountryCode').toBe(security.country.constructor.name);\n    expect('MarketCode').toBe(security.market.constructor.name);\n    expect('XIU').toBe(security.symbol);\n  });\n\n  it(\"Get wild card security.\", function() {\n    let wildCardSecurity = Security.getWildCard();\n    expect('*').toBe(wildCardSecurity.market.toCode());\n    expect('*').toBe(wildCardSecurity.symbol);\n  });\n\n  it(\"Is wild card check.\", function() {\n    expect(true).toBe(Security.isWildCard('*'));\n    expect(true).toBe(Security.isWildCard('*.*'));\n    expect(true).toBe(Security.isWildCard('*.*.*'));\n    expect(false).toBe(Security.isWildCard('*.'));\n    expect(false).toBe(Security.isWildCard('XIU'));\n  });\n});"]}
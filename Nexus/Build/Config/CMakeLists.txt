cmake_minimum_required(VERSION 2.8)
project(Nexus)

include_directories(./../../Include)
include_directories($ENV{ZLIB_INCLUDE_PATH})
include_directories($ENV{BEAM_INCLUDE_PATH})
include_directories($ENV{BOOST_INCLUDE_PATH})
include_directories($ENV{CPPUNIT_INCLUDE_PATH})
include_directories($ENV{CRYPTOPP_INCLUDE_PATH})
include_directories($ENV{MYSQL_INCLUDE_PATH})
include_directories($ENV{MYSQLPP_INCLUDE_PATH})
include_directories($ENV{OPEN_SSL_INCLUDE_PATH})
include_directories($ENV{QUICK_FIX_INCLUDE_PATH})
include_directories($ENV{TCLAP_INCLUDE_PATH})
include_directories($ENV{YAML_INCLUDE_PATH})

link_directories($ENV{BOOST_DEBUG_PATH})
link_directories($ENV{BOOST_OPTIMIZED_PATH})

SET(CMAKE_BUILD_TYPE $ENV{NEXUS_BUILD_TYPE})

if(MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
  add_definitions(-D_WIN32_WINNT=0x0501)
  add_definitions(-DWIN32_LEAN_AND_MEAN)
  add_definitions(-DNOMINMAX)
  add_definitions(-D_SCL_SECURE_NO_WARNINGS)
  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
  add_definitions(-DMYSQLPP_NO_DLL)
  add_definitions("/wd4355")
  add_definitions("/wd4503")
  add_definitions("/wd4091")
  add_definitions("/wd4297")
  add_definitions("/wd4005")
  add_definitions("/wd4275")
endif()
if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR
    "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -std=c++1y")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -O2 -DNDEBUG")
endif()
if(CYGWIN)
  add_definitions(-D__USE_W32_SOCKETS)
endif()
if(${CMAKE_SYSTEM_NAME} STREQUAL SunOS)
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -pthreads")
endif()

if(NOT EXISTS $ENV{LIB_INSTALL_DIRECTORY}/Debug)
  file(MAKE_DIRECTORY $ENV{LIB_INSTALL_DIRECTORY}/Debug)
endif()
if(NOT EXISTS $ENV{LIB_INSTALL_DIRECTORY}/Release)
  file(MAKE_DIRECTORY $ENV{LIB_INSTALL_DIRECTORY}/Release)
endif()
if(NOT EXISTS $ENV{TEST_INSTALL_DIRECTORY}/Debug)
  file(MAKE_DIRECTORY $ENV{TEST_INSTALL_DIRECTORY}/Debug)
endif()
if(NOT EXISTS $ENV{TEST_INSTALL_DIRECTORY}/Release)
  file(MAKE_DIRECTORY $ENV{TEST_INSTALL_DIRECTORY}/Release)
endif()

add_subdirectory(Accounting)
add_subdirectory(AdministrationService)
add_subdirectory(BinarySequenceProtocol)
add_subdirectory(ChartingService)
add_subdirectory(Compliance)
add_subdirectory(Definitions)
add_subdirectory(DefinitionsService)
add_subdirectory(FeeHandling)
add_subdirectory(FixUtilities)
add_subdirectory(InternalMatcher)
add_subdirectory(MarketDataService)
add_subdirectory(MoldUdp64)
add_subdirectory(OrderExecutionService)
add_subdirectory(OrderTasks)
add_subdirectory(Parsers)
add_subdirectory(Python)
add_subdirectory(Queries)
add_subdirectory(RiskService)
add_subdirectory(StampProtocol)
add_subdirectory(SoupBinTcp)
add_subdirectory(TechnicalAnalysis)
